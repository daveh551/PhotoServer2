<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Highway.Data.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Highway.Data.AggregateConfiguration">
            <summary>
            Base implementation of an Aggregate Root Bounded Context Configuration
            </summary>
        </member>
        <member name="T:Highway.Data.IAggregateConfiguration">
            <summary>
            Configuration of an aggregate root context
            </summary>
        </member>
        <member name="P:Highway.Data.IAggregateConfiguration.TypesConfigured">
            <summary>
            List of the types in the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.IAggregateConfiguration.ConnectionString">
            <summary>
            Connection String for the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.IAggregateConfiguration.Mappings">
            <summary>
            Mapping Configurations for the types in the bounded Context
            </summary>
        </member>
        <member name="P:Highway.Data.IAggregateConfiguration.Logger">
            <summary>
            Logged to be used by the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.IAggregateConfiguration.ContextConfiguration">
            <summary>
            Context level configuration for the bounded context
            </summary>
        </member>
        <member name="M:Highway.Data.AggregateConfiguration.#ctor(System.String,Highway.Data.IMappingConfiguration[],Common.Logging.ILog,Highway.Data.IContextConfiguration,System.Type[])">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="mappings"></param>
            <param name="logger"></param>
            <param name="contextConfiguration"></param>
            <param name="typesConfigured"></param>
        </member>
        <member name="P:Highway.Data.AggregateConfiguration.TypesConfigured">
            <summary>
            List of the types in the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.AggregateConfiguration.ConnectionString">
            <summary>
            Connection String for the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.AggregateConfiguration.Mappings">
            <summary>
            Mapping Configurations for the types in the bounded Context
            </summary>
        </member>
        <member name="P:Highway.Data.AggregateConfiguration.Logger">
            <summary>
            Logged to be used by the bounded context
            </summary>
        </member>
        <member name="P:Highway.Data.AggregateConfiguration.ContextConfiguration">
            <summary>
            Context level configuration for the bounded context
            </summary>
        </member>
        <member name="T:Highway.Data.DefaultContextConfiguration">
            <summary>
            Default Settings of Lazy loading and proxy generation off.
            </summary>
        </member>
        <member name="T:Highway.Data.IContextConfiguration">
            <summary>
            Implement this interface to pass the context specific mapping to the constructor
            </summary>
        </member>
        <member name="M:Highway.Data.IContextConfiguration.ConfigureContext(System.Data.Entity.DbContext)">
            <summary>
            This method allows the configuration of context specific properties to be injected
            </summary>
            <param name="context">the context that is being configured</param>
        </member>
        <member name="T:Highway.Data.DataContext">
            <summary>
            A base implementation of the Code First Data DataContext for Entity Framework
            </summary>
        </member>
        <member name="T:Highway.Data.EntityFramework.IEntityDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Highway.Data.EntityFramework.IEntityDataContext.ExecuteSqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL command and tries to map the returned datasets into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            The results should have the same column names as the Entity Type has properties
            </summary>
            <typeparam name="T">The Entity Type that the return should be mapped to</typeparam>
            <param name="sql">The Sql Statement</param>
            <param name="dbParams">A List of Database Parameters for the Query</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the query return</returns>
        </member>
        <member name="M:Highway.Data.EntityFramework.IEntityDataContext.ExecuteSqlCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL command and returns the standard int return from the query
            </summary>
            <param name="sql">The Sql Statement</param>
            <param name="dbParams">A List of Database Parameters for the Query</param>
            <returns>The rows affected</returns>
        </member>
        <member name="M:Highway.Data.EntityFramework.IEntityDataContext.Attach``1(``0)">
            <summary>
            Attaches the provided instance of <typeparamref name="T"/> to the data context
            </summary>
            <typeparam name="T">The Entity Type being attached</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to attach</param>
            <returns>The <typeparamref name="T"/> you attached</returns>
        </member>
        <member name="M:Highway.Data.EntityFramework.IEntityDataContext.Detach``1(``0)">
            <summary>
            Detaches the provided instance of <typeparamref name="T"/> from the data context
            </summary>
            <typeparam name="T">The Entity Type being detached</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to detach</param>
            <returns>The <typeparamref name="T"/> you detached</returns>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String,Highway.Data.IMappingConfiguration)">
            <summary>
            Constructs a context
            </summary>
            <param name="connectionString">The standard SQL connection string for the Database</param>
            <param name="mapping">The Mapping Configuration that will determine how the tables and objects interact</param>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String,Highway.Data.IMappingConfiguration,Common.Logging.ILog)">
            <summary>
            Constructs a context
            </summary>
            <param name="connectionString">The standard SQL connection string for the Database</param>
            <param name="mapping">The Mapping Configuration that will determine how the tables and objects interact</param>
            <param name="log">The logger being supplied for this context ( Optional )</param>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String,Highway.Data.IMappingConfiguration,Highway.Data.IContextConfiguration)">
            <summary>
            Constructs a context
            </summary>
            <param name="connectionString">The standard SQL connection string for the Database</param>
            <param name="mapping">The Mapping Configuration that will determine how the tables and objects interact</param>
            <param name="contextConfiguration">The context specific configuration that will change context level behavior ( Optional )</param>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String,Highway.Data.IMappingConfiguration,Highway.Data.IContextConfiguration,Common.Logging.ILog)">
            <summary>
            Constructs a context
            </summary>
            <param name="connectionString">The standard SQL connection string for the Database</param>
            <param name="mapping">The Mapping Configuration that will determine how the tables and objects interact</param>
            <param name="contextConfiguration">The context specific configuration that will change context level behavior</param>
            <param name="log">The logger being supplied for this context ( Optional )</param>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String)">
            <summary>
            Database first way to construct the data context for Highway.Data.EntityFramework
            </summary>
            <param name="databaseFirstConnectionString">The metadata embedded connection string from database first Entity Framework</param>
        </member>
        <member name="M:Highway.Data.DataContext.#ctor(System.String,Common.Logging.ILog)">
            <summary>
            Database first way to construct the data context for Highway.Data.EntityFramework
            </summary>
            <param name="databaseFirstConnectionString">The metadata embedded connection string from database first Entity Framework</param>
            <param name="log">The logger for the database first context</param>
        </member>
        <member name="M:Highway.Data.DataContext.AsQueryable``1">
            <summary>
            This gives a mockable wrapper around the normal <see cref="T:System.Data.Entity.DbSet`1"/> method that allows for testablity
            </summary>
            <typeparam name="T">The Entity being queried</typeparam>
            <returns><see cref="T:System.Linq.IQueryable`1"/></returns>
        </member>
        <member name="M:Highway.Data.DataContext.Add``1(``0)">
            <summary>
            Adds the provided instance of <typeparamref name="T"/> to the data context
            </summary>
            <typeparam name="T">The Entity Type being added</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to add</param>
            <returns>The <typeparamref name="T"/> you added</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Remove``1(``0)">
            <summary>
            Removes the provided instance of <typeparamref name="T"/> from the data context
            </summary>
            <typeparam name="T">The Entity Type being removed</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to remove</param>
            <returns>The <typeparamref name="T"/> you removed</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Update``1(``0)">
            <summary>
            Updates the provided instance of <typeparamref name="T"/> in the data context
            </summary>
            <typeparam name="T">The Entity Type being updated</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to update</param>
            <returns>The <typeparamref name="T"/> you updated</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Attach``1(``0)">
            <summary>
            Attaches the provided instance of <typeparamref name="T"/> to the data context
            </summary>
            <typeparam name="T">The Entity Type being attached</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to attach</param>
            <returns>The <typeparamref name="T"/> you attached</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Detach``1(``0)">
            <summary>
            Detaches the provided instance of <typeparamref name="T"/> from the data context
            </summary>
            <typeparam name="T">The Entity Type being detached</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to detach</param>
            <returns>The <typeparamref name="T"/> you detached</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Reload``1(``0)">
            <summary>
            Reloads the provided instance of <typeparamref name="T"/> from the database
            </summary>
            <typeparam name="T">The Entity Type being reloaded</typeparam>
            <param name="item">The <typeparamref name="T"/> you want to reload</param>
            <returns>The <typeparamref name="T"/> you reloaded</returns>
        </member>
        <member name="M:Highway.Data.DataContext.Commit">
            <summary>
            Commits all currently tracked entity changes
            </summary>
            <returns>the number of rows affected</returns>
        </member>
        <member name="M:Highway.Data.DataContext.ExecuteSqlQuery``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL command and tries to map the returned datasets into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            The results should have the same column names as the Entity Type has properties
            </summary>
            <typeparam name="T">The Entity Type that the return should be mapped to</typeparam>
            <param name="sql">The Sql Statement</param>
            <param name="dbParams">A List of Database Parameters for the Query</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> from the query return</returns>
        </member>
        <member name="M:Highway.Data.DataContext.ExecuteSqlCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL command and returns the standard int return from the query
            </summary>
            <param name="sql">The Sql Statement</param>
            <param name="dbParams">A List of Database Parameters for the Query</param>
            <returns>The rows affected</returns>
        </member>
        <member name="M:Highway.Data.DataContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.DataContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
                            before the model has been locked down and used to initialize the context.  The default
                            implementation of this method takes the <see cref="T:Highway.Data.IMappingConfiguration"/> array passed in on construction and applies them. 
            If no configuration mappings were passed it it does nothing.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
                            is created.  The model for that context is then cached and is for all further instances of
                            the context in the app domain.  This caching can be disabled by setting the ModelCaching
                            property on the given ModelBuidler, but note that this can seriously degrade performance.
                            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
                            classes directly.
            </remarks>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="P:Highway.Data.DataContext.EventManager">
            <summary>
            The reference to EventManager that allows for ordered event handling and registration
            </summary>
        </member>
        <member name="E:Highway.Data.DataContext.PreSave">
            <summary>
            The event fired just before the commit of the ORM
            </summary>
        </member>
        <member name="E:Highway.Data.DataContext.PostSave">
            <summary>
            The event fired just after the commit of the ORM
            </summary>
        </member>
        <member name="T:Highway.Data.DropCreateInitializer`1">
            <summary>
            ****    FOR DEVELOPMENT USAGE ONLY              ****
            ****    DO NOT PUT THIS IN PRODUCTION CODE      ****
            This class will clear the existing connections to the database and drop the database
            </summary>
        </member>
        <member name="M:Highway.Data.DropCreateInitializer`1.#ctor(System.Action{`0},System.Func{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            
            </summary>
            <param name="seedAction">actions to execute</param>
            <param name="storedProcs">stored procedure strings</param>
        </member>
        <member name="T:Highway.Data.EntityFramework.LoggingTraceExtensions">
            <summary>
            Extension for context to handle output of large numbers of queries
            </summary>
        </member>
        <member name="M:Highway.Data.EntityFramework.LoggingTraceExtensions.OutputSQL(Highway.Data.IDataContext,Common.Logging.ILog,Highway.Data.IQueryBase[])">
            <summary>
            Compiles the Context to execution of a query and tracks the time spent
            </summary>
            <param name="context">the context to run the test against</param>
            <param name="log">The log to output the information to</param>
            <param name="queries">the list of queries to be output</param>
            <exception cref="T:System.InvalidOperationException">If the compilation does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="M:Highway.Data.EntityFramework.LoggingTraceExtensions.OutputSQL(Highway.Data.IDataContext,Highway.Data.IQueryBase[])">
            <summary>
            Compiles the Context to execution of a query and tracks the time spent with a default console logger
            </summary>
            <param name="context">the context to run the test against</param>
            <param name="queries">the list of queries to be output</param>
            <exception cref="T:System.InvalidOperationException">If the compilation does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="T:Highway.Data.EntityFramework.PerformanceTracingExtensions">
             <summary>
            Extensions for testing and tracing performance of queries and context compilation
             </summary>
        </member>
        <member name="M:Highway.Data.EntityFramework.PerformanceTracingExtensions.RunPerformanceTest``1(Highway.Data.IQuery{``0},Highway.Data.IDataContext,System.Boolean,System.Int32)">
            <summary>
            Runs the given query against the context and tracks execution time with a default console out logger
            </summary>
            <param name="query">The query to be executed</param>
            <param name="context">the context to run the test against</param>
            <param name="firstTimeRun">Boolean flag to determine if the context compilation time will be ran outside of the query time for traing purpose </param>
            <param name="maxAllowableMilliseconds">the maximum number of milliseconds the execution should take</param>
            <typeparam name="T">The type being queried</typeparam>
            <returns>a tuple of boolean ( executed under allowed max ) and IEnumberable{T} for the results of the query</returns>
            <exception cref="T:System.InvalidOperationException">If the query execution does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="M:Highway.Data.EntityFramework.PerformanceTracingExtensions.RunPerformanceTest``1(Highway.Data.IQuery{``0},Highway.Data.IDataContext,Common.Logging.ILog,System.Boolean,System.Int32)">
            <summary>
            Runs the given query against the context and tracks execution time
            </summary>
            <param name="query">The query to be executed</param>
            <param name="context">the context to run the test against</param>
            <param name="log">The log to output the information to</param>
            <param name="firstTimeRun">Boolean flag to determine if the context compilation time will be ran outside of the query time for traing purpose </param>
            <param name="maxAllowableMilliseconds">the maximum number of milliseconds the execution should take</param>
            <typeparam name="T">The type being queried</typeparam>
            <returns>a tuple of boolean ( executed under allowed max ) and IEnumberable{T} for the results of the query</returns>
            <exception cref="T:System.InvalidOperationException">If the query execution does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="M:Highway.Data.EntityFramework.PerformanceTracingExtensions.RunStartUpPerformanceTest``1(Highway.Data.IDataContext,Highway.Data.IQuery{``0},System.Int32)">
            <summary>
            Compiles the Context to execution of a query and tracks the time spent
            </summary>
            <param name="context">the context to run the test against</param>
            <param name="query">The query to be executed</param>
            <param name="log">The log to output the information to</param>
            <param name="maxAllowableMilliseconds">the maximum number of milliseconds the execution should take</param>
            <typeparam name="T">The type being queried</typeparam>
            <exception cref="T:System.InvalidOperationException">If the compilation does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="M:Highway.Data.EntityFramework.PerformanceTracingExtensions.RunStartUpPerformanceTest``1(Highway.Data.IDataContext,Highway.Data.IQuery{``0},Common.Logging.ILog,System.Int32)">
            <summary>
            Compiles the Context to execution of a query and tracks the time spent
            </summary>
            <param name="context">the context to run the test against</param>
            <param name="query">The query to be executed</param>
            <param name="log">The log to output the information to</param>
            <param name="maxAllowableMilliseconds">the maximum number of milliseconds the execution should take</param>
            <typeparam name="T">The type being queried</typeparam>
            <exception cref="T:System.InvalidOperationException">If the compilation does not meet the expected time, it will throw this error</exception>
        </member>
        <member name="T:Highway.Data.Interceptors.AuditableInterceptor">
            <summary>
            An interceptor that operates pre-save to add audit information to the records being committed that implement the <see cref="T:Highway.Data.IAuditableEntity"/> interface
            </summary>
        </member>
        <member name="M:Highway.Data.Interceptors.AuditableInterceptor.#ctor(Highway.Data.IUserNameService,System.Int32)">
            <summary>
            Creates a interceptor for audit data attachment
            </summary>
            <param name="userNameService">Application Service that provides current user name</param>
            <param name="priority">The order in the priority stack that the interceptor should operate on</param>
        </member>
        <member name="M:Highway.Data.Interceptors.AuditableInterceptor.Execute(Highway.Data.IDataContext,Highway.Data.Interceptors.Events.PreSaveEventArgs)">
            <summary>
            Executes the interceptor handle an event based on the event arguments
            </summary>
            <param name="context">The data context that raised the event</param>
            <param name="eventArgs">The event arguments that were passed from the context</param>
            <returns>An Interceptor Result</returns>
        </member>
        <member name="P:Highway.Data.Interceptors.AuditableInterceptor.Priority">
            <summary>
             The priority order that this interceptor has for ordered execution by the event manager
            </summary>
        </member>
        <member name="T:Highway.Data.IMappingConfiguration">
            <summary>
            Implement this interface to pass the mappings in via constructor injection on the context.
            </summary>
        </member>
        <member name="M:Highway.Data.IMappingConfiguration.ConfigureModelBuilder(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method takes the modelBuilder from Entity Framework and wires in the mappings provided
            </summary>
            <param name="modelBuilder">The Database model builder used by Entity Framework to generate the model.</param>
        </member>
        <member name="T:Highway.Data.AdvancedCommand">
            <summary>
            An implementation that executes functions against the database tied to Entity Framework
            </summary>
        </member>
        <member name="M:Highway.Data.AdvancedCommand.Execute(Highway.Data.IDataContext)">
            <summary>
            Executes the expression against the passed in context and ignores the returned value if any
            </summary>
            <param name="context">The data context that the command is executed against</param>
        </member>
        <member name="P:Highway.Data.AdvancedCommand.ContextQuery">
            <summary>
            The Command that will be executed at some point in the future
            </summary>
        </member>
        <member name="T:Highway.Data.AdvancedQuery`1">
            <summary>
            This query is tied to the implementation of EntityFramework
            </summary>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`1.Execute(Highway.Data.IDataContext)">
            <summary>
            This executes the expression in ContextQuery on the context that is passed in, resulting in a <see cref="T:System.Linq.IQueryable`1"/> that is returned as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="context">the data context that the query should be executed against</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`1.OutputSQLStatement(Highway.Data.IDataContext)">
            <summary>
            This executes the expression against the passed in context to generate the SQL statement, but doesn't execute the IQueryable<typeparamref name="T"/> against the data context
            </summary>
            <param name="context">The data context that the query is evaluated and the SQL is generated against</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`1.ExtendQuery">
            <summary>
            This method allows for the extension of Ordering and Grouping on the prebuild Query
            </summary>
            <returns>an <see cref="T:System.Linq.IQueryable`1"/></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`1.AppendExpressions(System.Linq.IQueryable{`0})">
            <summary>
            Gives the ability to apend an <see cref="T:System.Linq.IQueryable"/> onto the current query
            </summary>
            <param name="query">The query containing the expressions to append</param>
            <returns>The combined query</returns>
        </member>
        <member name="P:Highway.Data.AdvancedQuery`1.ContextQuery">
            <summary>
            This holds the expression that will be used to create the <see cref="T:System.Linq.IQueryable`1"/> when executed on the context
            </summary>
        </member>
        <member name="T:Highway.Data.AdvancedQuery`2">
            <summary>
            The base implemetation of a query that has a projection
            </summary>
            <typeparam name="TSelection">The Type that will be selected</typeparam>
            <typeparam name="TProjection">The type that will be projected</typeparam>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`2.Execute(Highway.Data.IDataContext)">
            <summary>
            This executes the expression in ContextQuery on the context that is passed in, resulting in a <see cref="T:System.Linq.IQueryable`1"/> that is returned as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="context">the data context that the query should be executed against</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`2.OutputSQLStatement(Highway.Data.IDataContext)">
            <summary>
            This executes the expression against the passed in context to generate the SQL statement, but doesn't execute the IQueryable<typeparamref name="T"/> against the data context
            </summary>
            <param name="context">The data context that the query is evaluated and the SQL is generated against</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`2.ExtendQuery">
            <summary>
            This method allows for the extension of Ordering and Grouping on the prebuild Query
            </summary>
            <returns>an <see cref="T:System.Linq.IQueryable`1"/></returns>
        </member>
        <member name="M:Highway.Data.AdvancedQuery`2.AppendExpressions(System.Linq.IQueryable{`0})">
            <summary>
            Gives the ability to apend an <see cref="T:System.Linq.IQueryable"/> onto the current query
            </summary>
            <param name="query">The query containing the expressions to append</param>
            <returns>The combined query</returns>
        </member>
        <member name="T:Highway.Data.AdvancedScalar`1">
            <summary>
            Advanced query that returns a single value or object base on Entity Framework
            </summary>
            <typeparam name="T">The type of object or value being returned</typeparam>
        </member>
        <member name="M:Highway.Data.AdvancedScalar`1.Execute(Highway.Data.IDataContext)">
            <summary>
            Executes the expression against the passed in context
            </summary>
            <param name="context">The data context that the scalar query is executed against</param>
            <returns>The instance of <typeparamref name="T"/> that the query materialized if any</returns>
        </member>
        <member name="P:Highway.Data.AdvancedScalar`1.ContextQuery">
            <summary>
            The query to be executed later
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes">
            <summary>
            Contains attributes for Stored Procedure processing
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Name">
            <summary>
            Parameter name override. Default value for parameter name is the name of the 
            property. This overrides that default with a user defined name.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Size">
            <summary>
            Size in bytes of returned data. Should be used on output and returncode parameters.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Precision">
            <summary>
            Size in bytes of returned data. Should be used on output and returncode parameters.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Scale">
            <summary>
            Size in bytes of returned data. Should be used on output and returncode parameters.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Direction">
            <summary>
            Defines the direction of data flow for the property/parameter.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.ParameterType">
            <summary>
            Define the SqlDbType for the parameter corresponding to this property.
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.TypeName">
            <summary>
            Allows the setting of the parameter type name for user defined types in the database
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.TableName">
            <summary>
            Allows the setting of the user defined table type name for table valued parameters
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureAttributes.Schema">
            <summary>
            Allows the setting of the user defined table type name for table valued parameters
            </summary>
        </member>
        <member name="T:Highway.Data.StoredProcedureHelpers">
            <summary>
            Contains extension methods to Code First database objects for Stored Procedure processing
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Highway.Data.StoredProcedureHelpers.GetUnderlyingType(System.Type)" -->
        <member name="M:Highway.Data.StoredProcedureHelpers.GetMappedProperties(System.Type)">
            <summary>
            Get properties of a type that do not have the 'NotMapped' attribute
            </summary>
            <param name="t">Type to examine for properites</param>
            <returns>Array of properties that can be filled</returns>
        </member>
        <member name="M:Highway.Data.StoredProcedureHelpers.GetAttribute``1(System.Type)">
            <summary>
            Get an attribute for a type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="customAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedureHelpers.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Get an attribute for a property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="customAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedureHelpers.ReadRecord(System.Data.Common.DbDataReader,System.Object,System.Reflection.PropertyInfo[])">
            <summary>
            Read data for the current result row from a reader into a destination object, by the name
            of the properties on the destination object.
            </summary>
            <param name="reader">data reader holding return data</param>
            <param name="t">object to populate</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedureHelpers.ReadRecord(System.Data.SqlClient.SqlDataReader,System.Object,System.Reflection.PropertyInfo[])">
            <summary>
            Read data for the current result row from a reader into a destination object, by the name
            of the properties on the destination object.
            </summary>
            <param name="reader">data reader holding return data</param>
            <param name="t">object to populate</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedureHelpers.TableValuedParameter(System.Collections.IList)">
            <summary>
            Do the work of converting a source data object to SqlDataRecords 
            using the parameter attributes to create the table valued parameter definition
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highway.Data.StoredProcedures">
            <summary>
            Contains extension methods to Code First database objects for Stored Procedure processing
            </summary>
        </member>
        <member name="M:Highway.Data.StoredProcedures.CallStoredProc``1(System.Data.Entity.DbContext,Highway.Data.StoredProc{``0},``0)">
            <summary>
            Generic Typed version of calling a stored procedure
            </summary>
            <typeparam name="T">Type of object containing the parameter data</typeparam>
            <param name="context">Database Context to use for the call</param>
            <param name="procedure">Generic Typed stored procedure object</param>
            <param name="data">The actual object containing the parameter data</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedures.CallStoredProc(System.Data.Entity.DbContext,Highway.Data.StoredProc,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter})">
            <summary>
            Call a stored procedure, passing in the stored procedure object and a list of parameters
            </summary>
            <param name="context">Database context used for the call</param>
            <param name="procedure">Stored Procedure</param>
            <param name="parms">List of parameters</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProcedures.ReadFromStoredProc(System.Data.Entity.DbContext,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Type[])">
            <summary>
            internal
            
            Call a stored procedure and get results back. 
            </summary>
            <param name="context">Code First database context object</param>
            <param name="tablename">Qualified name of proc to call</param>
            <param name="parms">List of ParameterHolder objects - input and output parameters</param>
            <param name="outputtypes">List of types to expect in return. Each type *must* have a default constructor.</param>
            <returns></returns>
        </member>
        <member name="T:Highway.Data.ResultsList">
            <summary>
            Holds multiple Result Sets returned from a Stored Procedure call. 
            </summary>
        </member>
        <member name="M:Highway.Data.ResultsList.Add(System.Collections.Generic.List{System.Object})">
            <summary>
            Add a results list to the results set
            </summary>
            <param name="list"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Highway.Data.ResultsList.GetEnumerator" -->
        <member name="M:Highway.Data.ResultsList.ToList``1">
            <summary>
            Return the result set that contains a particular type and does a cast to that type.
            </summary>
            <typeparam name="T">Type that was listed in StoredProc object as a possible return type for the stored procedure</typeparam>
            <returns>List of T; if no results match, returns an empty list</returns>
        </member>
        <member name="M:Highway.Data.ResultsList.ToArray``1">
            <summary>
            Return the result set that contains a particular type and does a cast to that type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Array of T; if no results match, returns an empty array</returns>
        </member>
        <member name="P:Highway.Data.ResultsList.Count">
            <summary>
            Return the count of result sets
            </summary>
        </member>
        <member name="P:Highway.Data.ResultsList.Item(System.Int32)">
            <summary>
            Get the nth results list item
            </summary>
            <param name="index"></param>
            <returns>List of objects that make up the result set</returns>
        </member>
        <member name="T:Highway.Data.StoredProc`1">
            <summary>
            Genericized version of StoredProc object, takes a .Net POCO object type for the parameters. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Highway.Data.StoredProc">
            <summary>
            Represents a Stored Procedure in the database. Note that the return type objects
            must have a default constructor!
            </summary>
        </member>
        <member name="M:Highway.Data.StoredProc.HasOwner(System.String)">
            <summary>
            Fluent API - assign owner (schema)
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc.HasName(System.String)">
            <summary>
            Fluent API - assign procedure name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc.ReturnsTypes(System.Type[])">
            <summary>
            Fluent API - set the data types of resultsets returned by the stored procedure. 
            Order is important! Note that the return type objects must have a default constructor!
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc.#ctor">
            <summary>
            Constructors. Note that the return type objects
            must have a default constructor!
            </summary>
        </member>
        <member name="F:Highway.Data.StoredProc.outputtypes">
            <summary>
            List of data types that this stored procedure returns as result sets. 
            Order is important!
            </summary>
        </member>
        <member name="P:Highway.Data.StoredProc.schema">
            <summary>
            Database owner of this object
            </summary>
        </member>
        <member name="P:Highway.Data.StoredProc.procname">
            <summary>
            Name of the stored procedure
            </summary>
        </member>
        <member name="P:Highway.Data.StoredProc.fullname">
            <summary>
            Get the fully (schema plus owner) name of the stored procedure
            </summary>
        </member>
        <member name="P:Highway.Data.StoredProc.returntypes">
            <summary>
            Get an array of types returned
            </summary>
        </member>
        <member name="M:Highway.Data.StoredProc`1.#ctor(System.Type[])">
            <summary>
            Constructor. Note that the return type objects must have a default constructor!
            </summary>
            <param name="types">Types returned by the stored procedure. Order is important!</param>
        </member>
        <member name="F:Highway.Data.StoredProc`1.MappedParams">
            <summary>
            Contains a mapping of property names to parameter names. We do this since this mapping is complex; 
            i.e. the default parameter name may be overridden by the Name attribute
            </summary>
        </member>
        <member name="M:Highway.Data.StoredProc`1.ProcessOutputParms(System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},`0)">
            <summary>
            Store output parameter values back into the data object
            </summary>
            <param name="parms">List of parameters</param>
            <param name="data">Source data object</param>
        </member>
        <member name="M:Highway.Data.StoredProc`1.Parameters(`0)">
            <summary>
            Convert parameters from type T properties to SqlParameters
            </summary>
            <param name="data">Source data object</param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc`1.HasOwner(System.String)">
            <summary>
            Fluent API - assign owner (schema)
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc`1.HasName(System.String)">
            <summary>
            Fluent API - assign procedure name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Highway.Data.StoredProc`1.ReturnsTypes(System.Type[])">
            <summary>
            Fluent API - set the data types of resultsets returned by the stored procedure. 
            Order is important! Note that the return type objects must have a default constructor!
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
    </members>
</doc>
